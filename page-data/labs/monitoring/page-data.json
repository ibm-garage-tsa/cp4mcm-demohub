{"componentChunkName":"component---src-pages-labs-monitoring-index-mdx","path":"/labs/monitoring/","result":{"pageContext":{"frontmatter":{"title":"Lab 4 - Monitoring using SRE Golden Signals","description":"Monitoring using SRE Golden Signals with IBM Cloud Pak for Multicloud Management"},"relativePagePath":"/labs/monitoring/index.mdx","titleType":"page","MdxNode":{"id":"46eb4449-985a-5692-a2b6-a81a9d0fd700","children":[],"parent":"e32e999e-102f-54ed-a3f0-d14b0f048d37","internal":{"content":"---\ntitle: Lab 4 - Monitoring using SRE Golden Signals\ndescription: Monitoring using SRE Golden Signals with IBM Cloud Pak for Multicloud Management\n---\n\n<FeatureCard\n  title=\"Monitoring using SRE Golden Signals with IBM Cloud Pak for Multicloud Management\"\n  color=\"dark\"\n  >\n\n![banner](/images/monitoring-banner.jpg)\n\n</FeatureCard>\n\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisite</AnchorLink>\n  <AnchorLink>Business Context</AnchorLink>\n  <AnchorLink>Add Managed Clusters</AnchorLink>\n  <AnchorLink>Deploy cloud native monitoring</AnchorLink>\n  <AnchorLink>Deploy Bookinfo Application</AnchorLink>\n  <AnchorLink>Deploy synthetics monitoring Point-of-Presence</AnchorLink>\n  <AnchorLink>Explore SRE Golden Signals</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n## Lab Overview\n\nMonitoring module of IBM Cloud Pak for Multicloud Management is a modern management platform, providing application-aware infrastructure monitoring and analysis for improved time to value. As a cloud-native application management platform, Monitoring provides the correct set of easy to use tools that meet the needs of development, operations, and site reliability engineering (SRE) teams. Tools needed to quickly find the root cause of an issue across a broad range of technologies, hybrid-cloud, and complex microservices architectures in all sorts of industries. Monitoring delivers app-centric monitoring of microservices-based applications in addition to monitoring for traditional resources across enterprises.\n\nMonitoring module includes IBM Cloud Event Management and gives site reliability engineers (SREs) a consistent monitoring method across the enterprise to any public or private cloud. Deploy in minutes, simplify your application management with increased flexibility, and deliver on different aspects of the application modernization journey.\nWith Monitoring, you can simplify monitoring and incident management, which helps decrease time to resolution no matter how complex the hybrid microservices-based environment.\n\nIn this tutorial, you will explore the following key capabilities:\n-\t`Understand Cloud Pak for Multicloud Management Monitoring module`\n-\t`Learn how to add cloud native monitoring to the managed cluster`\n- `learn how to gather monitoring metrics from the managed cluster`\n-\t`Learn how to use SRE Golden Signals to monitor application running on the managed cluster`\n\n***\n\n## Prerequisite\n\n- You need to provision your own copy of the CP4MCM 2.x environment, start it and verify for correct startup (check [here](../../gettingstarted/)).\n\n***\n\n## Business Context\n\nCompanies are modernizing their applications, preparing to move them to the cloud. In this process, applications are refactored to use a microservice architecture and deployed in dynamic environments like Kubernetes. Cloud-native development is way more agile than traditional methodology, which enables changes to application structure at a rapid pace. This creates a challenge for Operation teams who must maintain those applications and provide high availability of the services. With a new version of application deployed daily or weekly, there is rarely time to create bespoke monitoring dashboards and practice the troubleshooting routines. Both people and tools have to adapt to new conditions.\nIBM Cloud Pak for Multicloud Management can manage Kubernetes clusters that are deployed on any target infrastructure - either in your own data center or in a public cloud. IBM Cloud Pak for Multicloud Management includes IBM Cloud App Management to simplify monitoring your applications across any cloud environment.\nIBM Cloud Pak for Multicloud Management helps companies make the transition from traditional monitoring systems to cloud-based ones more easily. It effectively monitors all kinds of IT resources in a hybrid environment. It helps Operation teams manage hybrid environments without hiring new personnel to support each new technology that is being used by developers.\nIn this tutorial, you learn how to use IBM Cloud Pak for Multicloud Management to monitor and manage the application availability with a \"Golden Signal\" approach to monitoring your applications. This approach focuses on Latency, Errors, Traffic, and Saturation (for a quick introduction, see Simplify Application Monitoring with SRE Golden Signals).\n\nIn this tutorial, you use a Red Hat OpenShift cluster with Cloud Pak for MCM as a **Management Hub** and a second single-node cluster running MicroK8s as a **managed cluster**\n-\tHub cluster includes management console, federated monitoring, and all the controllers. \n-\tManaged cluster includes klusterlet components that communicate status back to the Hub cluster. \n\nThe relationship between hub and managed clusters is shown in the diagram below:\n\n![](images/1-cluster-mgmt-img.png)\n\nIn this tutorial, you will log in to the Hub cluster and configure the Monitoring module.\n\nYou will complete the following tasks:\n-\tAdd a managed cluster (if not done already)\n-\tDeploy cloud native monitoring to the managed cluster\n-\tVisualize monitored resources in a managed cluster\n- Install the Synthetic Monitoring Point-of-Presence\n-\tDeploy an monitored application to managed cluster\n-\tDefine the synthetic monitoring of the application and define a Service Level Objective for it\n- Explore application service topology and SRE Golden Signals provided by data collectors embeded in the application runtimes\n\n***\n\n## Add Managed Clusters\n\nIn this section, you will add a managed cluster in your Control Panel. If you have done this before as a part of [Cluster Management lab](../clustermgmt/index.mdx) you may skip to the [Next step](#deploy-cloud-native-monitoring-to-the-managed-cluster)\n\n1. To start the lab, you should be in your Cloud Pak for Multicloud Management Web Console. If you are not, check [here](../gettingstarted/) how to open your console page.\n\n   ![](images/2-cluster-mgmt-img.png)\n\n2. Now, let's explore the Cluster view. Click the hamburger **Menu** (1) and select **Automated Infrastructure -> Clusters** (2).\n\n   ![](images/2020-09-17-19-58-15.png)\n\n3. You can add a cluster by Importing an existing cluster or provisioning a new cluster using a Service Library. We use the first option. Select **Import an Existing cluster** (1) and click **Import** (2).\n\n   ![](images/2020-09-17-20-00-49.png)\n\n4. Enter **microk8s** for cluster name (1) and **microk8s** for namespace (2). Click **Generate command** to continue (3).\n\n   ![](images/2020-09-17-20-26-25.png)\n\n5. A curl command is generated that you will use to add the new cluster. Click **Copy command** button (1) and click **View cluster** (2) to see the new  managed cluster details page. \n\n   ![](images/7-cluster-mgmt-img.png)\n\n6. Go back to the desktop and open the terminal window to MicroK8s cluster clicking the **MicroK8s Terminal** link. \n\n   ![](images/2020-09-17-20-30-28.png)\n\n7. MicroK8s terminal has a yellow background. To verify the cluster status run the following command in the **MicroK8s** window\n\n  ```\n  kubectl get nodes\n  ```\n\n  ![](images/2020-09-17-20-32-22.png)\n\n  Great, you are accessing the managed cluster. Now you are ready to execute the generated command.\n\n8. **Paste** the generated command that you previously copied in the clipboard. When you run the command, several Kubernetes objects are created in the multicluster-endpoint namespace.\n\n  ![](images/2020-09-17-20-33-29.png)\n\n  If you see the error as before - just run the command again.\n\n9. You can view the progress by entering the command:\n\n  ```\n  kubectl get pods -n multicluster-endpoint\n  ```\n\n  Make sure all the pods are in the running state.\n\n  ![](images/2020-09-17-20-35-48.png)\n\n10. Back to the browser window, click **View cluster** and make sure that the cluster status is **Ready** now (if necessary, refresh the details page).\n\n  ![](images/2020-09-17-20-37-12.png)\n\n  ![](images/2020-09-17-20-38-01.png)\n\n11. On the page navigation breadcrumb, click on **Clusters** link\n\n  ![](images/2020-09-17-20-39-09.png)\n\n12. Now you can see your managed cluster in a clusters list. You need to add labels to identify your new cluster. Labels are then used by the PlacementRules and PlacementPolicies to select clusters where different applications and policies should be deployed.\n\n    In the [Cluster Management lab](../clustermgmt/index.mdx) you could learn how to add labels using a web console. Below you will use alternative methods of modifying labels using a CLI.\n\n    First, you need to install a multicluster plugin to the `cloudctl` command. Open the green terminal to the **Management Hub** and run the following commands\n\n    ```sh\n    curl -kLo cloudctl-mc-plugin https://cp-console.apps.demo.ibmdte.net/rcm/plugins/mc-linux-amd64\n    cloudctl login -a https://cp-console.apps.demo.ibmdte.net -u bob -p Passw0rd -n default\n    cloudctl plugin install -f cloudctl-mc-plugin\n    ```\n\n    Now, you can manage your remote clusters with the cli. To list the labels for **microk8s** cluster, in a green **Management Hub** terminal run:\n\n    ```sh\n    cloudctl mc describe cluster microk8s -n microk8s -c hub0\n    ```\n\n    To add a new label **environment=QA** run the following command in a green **Management Hub** terminal\n\n    ```sh\n    cloudctl mc label cluster microk8s environment=QA -n microk8s\n    ```\n\n    The remote Kubernetes cluster is now registered as a managed cluster. In the next step, you will deploy the cloud native monitoring to that mamnaged cluster.\n\n***\n\n## Deploy cloud native monitoring\n\nWhen the Cloud Pak for Multicloud Management is installed with the Monitoring module, you can automatically deploy the Kubernetes data collector to the remote managed clusters. This data collector is capable of gathering and sending to the Management Hub information about performance of all nodes, pods and other resources running in a managed cluster.\n\nTo deploy Kuberenetes data collector (also known as cloud native monitoring) complete the steps below.\n\n1. First, you need to label target cluster with **ibm.com/cloud-native-monitoring=enabled**. You can do this in web console, or run the following command in a green terminal titled **Management Hub**\n\n   ```sh\n   cloudctl mc label cluster microk8s ibm.com/cloud-native-monitoring=enabled -n microk8s\n   ```\n\n   ![](images/2020-09-27-17-05-18.png)\n\n2. Second, you need to add the target cluster namespace as a managed resource to your team. Again, you can do this in web console (Menu -> Administer -> Identity and access -> Teams tab, select the team 'operations', edit the Resources), or run the following command in a green terminal titled **Management Hub**\n\n   ```sh\n   cloudctl iam resource-add operations -r crn:v1:icp:private:k8:mycluster:n/microk8s:::\n   ```\n\n   This command adds a namespace **microk8s** (this namespace was automatically created during cluster import and contains the cluster CRD) as a managed resource to the team **operations**. This operations triggers the deployment process of cloud-native-monitoring operator to the target cluster.\n\n   You can check that the operator was deployed running the following commands in a yellow terminal connected to **MicroK8s** cluster\n\n   ```sh\n   kubectl get pods -n cp4mcm-cloud-native-monitoring\n   ```\n\n   ![](images/2020-09-27-17-15-43.png)\n\n3. Finally, you need to open the Monitoring module console as a user belonging to the operations team - user **bob** in our case. Select \"hamburger\" menu in the top-left corner and then **Monitor health** (2) and **Infrastructure monitoring**.\n\n   ![](images/2020-09-27-17-21-27.png)\n\n   If you are redirected to login page, login again as user **bob** with password **Passw0rd**. Eventually, you should see the **Resources** tab shown below:\n\n   ![](images/2020-09-27-17-23-53.png)\n\n   The page probably won't show any resources yet, because the process to install Kubernetes data collector was just started. You can check if it was successfully deployed running the previous command again (in yellow terminal).\n\n   ![](images/2020-09-30-12-44-36.png)\n\n   When it is deployed, after 1-2 minutes you can refresh the browser, and you should see the view showing now all the resources from the managed cluster.\n\n   ![](images/2020-09-27-17-32-27.png)\n\n   Click the **Kubernetes cluster**.\n\n   ![](images/2020-09-27-17-34-20.png)\n\n   Then click **microk8s**.\n\n   ![](images/2020-09-27-17-35-36.png)\n\n   The next view, let you explore the metrics and events releated to the selected resource. On top, you can see the Event timeline (1) for wihich you can change the time window (from 30 minutes to 1 week). Deployment topology widget (2) shows how the specific resource is located within the cluster. \n\n   ![](images/2020-09-27-17-40-30.png)\n\n   If you hover over the numbers on the Timeline (1) you can see the details of the events. You can also click the 'How do I read this' link (2) on the Deployment topology to learn hot to use that widget.\n\n   ![](images/2020-09-27-17-44-10.png)\n\n   ![](images/2020-09-27-17-45-38.png)\n\n   Feel free to explore other resources and their metrics. For example you can click the worker node icon on the Deployment topology widget.\n\n   ![](images/2020-09-27-17-49-48.png)\n\n***\n\n## Deploy Bookinfo Application\n\nOn top of monitoring Linux worker nodes and basic Kubernetes objects Operations teams want are responsible for monitoring business applications. So let's deploy sample application, called Bookinfo\n\n1. To start, clone the git repository containing the yaml files needed to deploy the application. Using the green terminal window, run the following commands on the **Management Hub**\n\n   ```sh\n   git clone https://github.com/dymaczew/charts\n   cd charts\n   ```\n\n2. Apply the application resources running the following commands:\n\n   ```sh\n   /home/ibmuser/oclogin.sh\n   oc apply -f bookinfo-multiclister-2020.2.1\n   oc apply -f kubernetes-1.18-ingress-deployable.yaml\n   ```\n\n   If you happen to run Kubernetes 1.19 on the your managed cluster (outside the Skytap environment) use kubernetes-1.19-ingress-deployable.yaml. Ingress API was changed in 1.19 and extended with new mandatory fields\n\n   The output looks like the following:\n\n   ![](images/2020-09-30-13-38-44.png)\n\n   Don't worry about the error in the last line - it just means that ImagePolicy admission controller is not used in the environment.\n\n3. Now, let's edit the placement rule for the application to get it deployed on the managed cluster (we tagged in with label \"environment=QA\"). Navigate to application view, selecting the \"hamburger\" menu in the top-left corner, then **Observe environments** and **Overview**\n\n   ![](images/2020-09-30-13-48-03.png)\n\n   On the overview page, scroll down to the Applications section and select **bookinfo-app** link. We recommend this way, becasue for some reason (probably a bug?) the application is not listed directly on the Hybrid Applications list\n\n   ![](images/2020-09-30-13-50-11.png)\n\n4. When the Application view opens, click on the **bookinfo-rule** icon\n\n   ![](images/2020-09-30-13-51-45.png)\n\n5. Edit the placement rule in the editor on the right, changing the value of the label from **Dev** to **QA** (1) and then apply you changes with the button on top of the editor(2)\n\n   ![](images/2020-09-30-13-56-39.png)\n\n6. After a few seconds, you should notice that the application is now being placed on the **microk8s** cluster. The deployment takes usually 1-2 minutes needed to pull images and start containers.\n\n   ![](images/2020-09-30-18-55-48.png)\n\n7. You can verify if the application was successfuly deployed and is accessible by opening a new browser tab and entering the URL: `bookinfo.10.0.0.2.nip.io`. You should reach the page that looks like below:\n\n   ![](images/2020-09-30-19-50-18.png)\n   \n***\n\n## Exploring synthetics monitoring\n\nCloud Pak for Multicloud Management is capable of monitoring the application availability using a synthetic transaction monitoring. There is a default agent installed on the Hub cluster that automatically starts monitoring any ingress object that is deployed as a part of Hybrid application. Let's check how it looks like.\n\n1. Open the Monitoring module interface (Select \"hamburger\" menu, then **Monitor Health**, then **Infrastructure monitoring**). Then select the **Synthetic results** tab\n\n   ![](images/2020-09-30-20-01-54.png)\n\n2. On the page Synthetic results page, you should see the automatically configured monitor for ingress deployed as a part of Bookinfo application. Click on the monitor name to explore details\n\n   ![](images/2020-09-30-20-03-37.png)\n\n3. You can adjust the scope of the timeline, reducing the windows to last 30 minutes (1). You can also select to see a Response time graph or a response time Breakdown (2). This helps to diagnose issues related to name resolution on establishing the SSL session.\n\n   ![](images/2020-09-30-20-11-38.png)\n\n4. When you scroll down you can see the results of actual tests. Select any dot on the graph to see detailed breakdown of the response.\n\n   ![](images/2020-09-30-20-13-53.png)\n\n   You can deploy more agents in different locations to have your applications tested for availability and response time from a customer perspective. Deploying own agents allows also to configure more sophisticated test schedules. Let's see how it works.\n\n5. Go to the green terminal titled **Management hub** and run the following commands to unpack the synthetics agent binaries that were downloaded for you.\n\n   ```sh\n   cd\n   tar xvf app_mgmt_syntheticpop_xlinux.tar.gz\n   cd app_mgmt_syntheticpop_xlinux\n   ```\n6. To configure the synthetic monitoring agent you need a config pack that will instruct agent where to look for test definitions and where to send the gathered data. Go back to you browser, click the **Synthetic results** breadcrumb in the top-left corner of the screen. Then select the Administration tab.\n\n   ![](images/2020-10-01-12-00-43.png)\n\n   ![](images/2020-10-01-12-02-04.png)\n\n7. On the Administration view select the **Integrations** tile, then **New integration** button.\n\n   ![](images/2020-10-01-13-00-10.png)\n\n   ![](images/2020-10-01-13-01-05.png)\n\n8. Click **Configure** under the **Monitoring Data Collectors** tile\n\n   ![](images/2020-10-01-13-02-18.png)\n\n9. Do not provide any name, just click the **Download file** button and save the file to your workstation\n\n   ![](images/2020-10-01-13-03-26.png)\n\n   ![](images/2020-10-01-12-58-21.png)\n\n10. Go back to the green terminal titled **Management Hub** and run the following commands to preconfigure and install the Synthetic Monitoring agent\n\n    ```sh\n    ./config-pop.sh -f /home/ibmuser/Downloads/ibm-cloud-apm-dc-configpack.tar\n    ```\n\n    Answer the installation wizard with the following values:\n    \n    ```sh\n    You will configure a new local point of presence (PoP).\n\n    Enter a name for your PoP. Your PoP will be identified by this name: pop_user1 -- A point of presence name\n    The PoP name is set to pop_user1\n\n    Enter the name of the country in which your PoP is located: USA -- Use any country\n    The country name is set to USA\n\n    Enter the name of the city in which your PoP is located: Las Vegas -- Use any city\n    The city name is set to Las Vega\n\n    Enter a description of your PoP (optional): pop_user1 -- It is just descritpion\n    The description is set to \"pop_user1\"\n\n    Enter the proxy server address for communicating with IBM ICAM server. The address format is ip:port (Press Enter if you do not need to use a proxy) :  Press Enter\n    Proxy server address for communicating with IBM ICAM server is set to \n\n    Update the proxy type (no | manual | pac) for playbacking synthetic tests to monitor your web applications. Enter 'no' to choose no proxy. Enter 'manual' to configure your proxy with a proxy server ip address and port number. Enter 'pac' to use an automatic configuration URL. (Press Enter if you do not want to make any changes: no): Press Enter\n\n    Playback proxy type is set to no\n\n    Your PoP is configured with the following details:\n    LOCATION=\"pop_user1,USA,Las Vegas,0,0,pop_user1\"\n    AGENT_PROXY_SERVER=\"\"\n    PLAYBACK_PROXY_TYPE=\"no\"\n    PLAYBACK_PROXY_HOST_PORT=\"\"\n    PLAYBACK_PROXY_BYPASS=\"\"\n    PLAYBACK_PROXY_CONFIG_URL=\"\"\n    CACHE_REDIS_MAX_SIZE_MB=\"\"\n\n    Do you confirm? [y for yes or n for no]: Press 'y'\n    pop.properties is configured! You can run start-pop.sh to start your PoP.\n    ```\n\n    Finally, run the following command to start the agent:\n\n    ```sh\n    ./start-pop.sh\n    ```\n\n11. Now, when you have additional Point-of-Presence (syntectic monitoring agent) installed, go back to your browser and navigate to the **Administration** page, and then select the **Synthetics** tile.\n\n    ![](images/2020-10-01-17-40-45.png)\n\n    Click **Create** button\n\n    ![](images/2020-01-15-13-33-53.png)\n\n    Give your test a name and description.\n\n    ![](images/2020-01-15-13-35-24.png)\n\n    Scroll down and select the test type (Webpage). You can notice there are other types of tests available - you can for example replay web session recorded with Selenium, or create API tests using either SOAP or REST APIs.\n\n    ![](images/2020-01-15-13-36-26.png)\n\n    In the next step you need to provide the URL of the bookinfo main application page. Scroll down and provide the following values:\n\n    URL: http://bookinfo.10.0.0.2.nip.io:9080/productpage?u=normal\n\n    **IMPORTANT** Use the above URL, don't worry that the screenshots below shows differnt one!\n\n    Threshold value for Warning: 1\n\n    Threshold value for Critical: 2\n\n    ![](images/2020-02-05-12-19-02.png)\n\n    Click **Verify test**\n\n    ![](images/2020-01-15-13-49-36.png)\n\n    ![](images/2020-01-15-13-51-17.png)\n\n    On the next page, change the test frequency to 1 minute and make sure that your previously installed PoP agent is selected\n\n    ![](images/2020-01-15-17-11-44.png)\n\n    Click **Finish** at the bottom of the page\n\n    ![](images/2020-01-15-17-09-11.png)\n\n    Now, you have synthetics agent that will generate the traffic against the Bookinfo application. You can move to the final part of the tutorial, exploring tools available for Site Reliability Engineers.\n\n***\n\n## Explore SRE Golden Signals\n\n   During this lab exercise, you will be exploring the Golden Signals.  The Golden Signals are a way of normalizing the performance KPIs to make it easier and more intuitive for an SRE to debug a problem.\n\n1. In the browser with the Cloud Pak user interface, click the Resources tab\n\n   ![](images/2020-01-19-17-21-00.png)\n\n2. Select \"Kubernetes Services\"\n\n   You will see a list of kubernetes services that are running in your environment\n\n   ![](images/2020-01-19-17-25-00.png)\n\n3. Click the link for the \"productpage\" resource\n\n   You will navigate to the page for the productpage microservice.  Let's explore this page as seen below\n\n   ![](images/2020-01-19-17-31-00.png)\n\n4. Deployment topology\n\n   In the upper left corner, you see the \"Deployment topology\".  You've seen this before in the context of the kubernetes cluster.  Now, you're viewing it in the context of the productpage microservice.  What the topology is showing you is that this microservice is deployed to one pod on one node in the cluster.  If you scaled out the deployment to 2 pods, then you would see 2 pods in the Deployment topology.\n\n5. Golden Signals\n\n   Next, look at the golden signals on the right side of the page.   The 4 graphs labeled Latency, Errors, Traffic, and Saturation are the Golden Signals.  These are the most important metrics for Site Reliability Engineering (SRE) as they show the metrics imoprtant from the end-user perspective, that have been normalized for different application/middleware domains.  Let's explore Latency a little more.\n\n6. Latency\n\n   Flyover the Latency Graph.  You'll see a graph showing the latency shown in different percentiles (50th, 90th, and 95th).  By using percentiles, you get a much better idea how the applicaiton is performing.\n\n   ![](images/2020-01-19-17-40-00.png)\n\n   Next, select the dropdown list in the Filter.  The default behavior is to show 50th, 90th, and 95th percentile for all URLs.  But, sometimes you want to filter the data.  \n\n   ![](images/2020-01-20-08-12-32.png)\n\n   Select 1 or more of the URLs for the productpage microservice\n\n   View the latency data for the URLs that you selected.\n\n   Within filters, select the icon on the far right for the \"/productpage?u=normal\" URL.\n\n   ![](images/2020-01-20-08-16-32.png)\n\n   After you click the icon, you will see some very useful information as seen below.  At the top of the page, you see a scatter plot chart that allows you to see a distribution of the requests.  This is a very useful way to visualize the transactions because it allows you to see patterns and outliers.  \n\n   Below that, expand one of the requests and you will see a breakdown of where the request spent its time.\n\n   ![](images/2020-01-19-19-59-00.png)\n\n   Close the Trace Breakdown window by clicking the \"X\" in the upper right corner.\n\n   ![](images/2020-01-20-08-19-27.png)\n\n   Now, click the 3 vertical dots in the upper right corner of the Latency graph and select \"Latency Options\"\n\n   ![](images/2020-01-20-08-21-09.png)\n\n   Notice that you can customize the latency options.  Either change the latency percentiles or add/delete lines from the graph.  Try it out.\n\n   ![](images/2020-01-19-17-49-00.png)\n\n7. Next, examine the Service dependencies\n\n   ![](images/2020-01-21-08-48-36.png)\n\n   The service dependency shows a 1-hop topology of the microservices.  For the productpage service, it shows that there are clients connecting to the service and there is a dependency on \"details\" and \"reviews\".  \n\n   Click on \"reviews\" icon.  You will navigate to that microservice and see the 1-hop topology for the \"review\" service.  Examine the golden signals for the \"reviews\" service.  \n\n8. Full Service Topology\n\n   Most of the time, the 1-hop topology is good enough to diagnose the root cause of a problem.  But, sometimes you need to see additional information.  Click the **\"expand to the full screen\"** icon in the upper right corner of the service dependencies to expand the view.\n\n   ![](images/2020-01-20-08-30-45.png)\n\n   The view you see comes from an embedded capability called Agile Service Manager (ASM).  ASM allows you to expand to more than hop in the topology. It also allows you to visualize changes that are occurring in the application.  Since change introduces most of the problems in IT, this is a powerful capability.\n\n   ![](images/2020-01-19-19-46-00.png)\n\n   Let's start by switching to a 2-hop topology.  Select the dropdown in the top-middle of the screen and change the value to \"2\".  Then click \"Render\"\n\n   ![](images/2020-01-22-09-51-29.png)\n\n   We won't examine it here, but ASM allows you to hide/show some additional objects in the topology.  In this topology, you see the microservice topology.  If you want, you can add the pods into the topology.  To add/hide elements on the page, click the **Filter** icon to the left of the \"Render\" button.\n\n   ![](images/2020-01-20-08-36-10.png)\n\n   ASM has powerful capabilities to show you what's changing.  This includes topology changes, state changes, and property changes.  We won't be exploring that capability since there haven't been any changes to the application.  Feel free to explore additional ASM capabilities.  When you are done exploring, you can click on one of the icons for the microservices and you will navigate back to the Golden Signal view.\n\n9. Drill Down into the Runtime\n\n   Sometimes you need additional details that can only be gathered from the data collector that is running within the runtime.  If the app server (python, Node.js, JVM, golang) is instrumented with a lightweight data collector, you can click on the container and drilldown into the runtime metrics.  \n\n   Click on the \"container\" in the Deployment topology.\n\n   ![](images/2020-01-20-08-40-27.png)\n\n   You are now viewing the detailed container metrics for this microservice. To navigate to the detailed metrics reported by the data collector, scroll down and click the appropriate name in **Related resources** window.\n\n   ![](images/2020-01-20-08-42-07.png)\n\n   The runtime page shows selection of most important metrics for a selected runtime type\n\n   ![](images/2020-01-20-08-44-30.png)\n\n   To expore any other metric, scroll down the page and expand the **Custom metrics** section, picking the metric you want and additional filtering and display options.\n\n   ![](images/2020-01-20-08-47-50.png)\n\n   This concludes the exercise. You now understand how to naviagate Golden Signals view.\n\n   Additional resources: \n   - [Golden Signals video on YouTube](https://youtu.be/z5WLD6vANvw)\n   - [Blog: Golden Signals explained](https://www.ibm.com/cloud/blog/video-better-application-monitoring-with-sre-golden-signals)\n\n***\n\n## Summary\n\nYou completed the Cloud Pak for Multicloud Management tutorial: Monitoring and using SRE Golden Signals. Throughout the tutorial, you explored the key takeaways:\n-\t`Understand Cloud Pak for Multicloud Management Monitoring module`\n-\t`Learn how to add cloud native monitoring to the managed cluster`\n- `learn how to gather monitoring metrics from the managed cluster`\n-\t`Learn how to use SRE Golden Signals to monitor application running on the managed cluster`\n\nIf you would like to learn more about Cloud Pak for Multicloud Management, please refer to:\n-\t<a href=\"https://www.ibm.com/cloud/cloud-pak-for-management\" target=\"blank\">Cloud Pak for Multicloud Management home page</a>\n- <a href=\"https://www.ibm.com/demos/collection/Cloud-Pak-for-Multicloud-Management\" target=\"blank\">Cloud Pak for Multicloud Management Demos </a>\n","type":"Mdx","contentDigest":"f5864e1201599444d6ad3d6c42cb9e9e","counter":1512,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Lab 4 - Monitoring using SRE Golden Signals","description":"Monitoring using SRE Golden Signals with IBM Cloud Pak for Multicloud Management"},"exports":{},"rawBody":"---\ntitle: Lab 4 - Monitoring using SRE Golden Signals\ndescription: Monitoring using SRE Golden Signals with IBM Cloud Pak for Multicloud Management\n---\n\n<FeatureCard\n  title=\"Monitoring using SRE Golden Signals with IBM Cloud Pak for Multicloud Management\"\n  color=\"dark\"\n  >\n\n![banner](/images/monitoring-banner.jpg)\n\n</FeatureCard>\n\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisite</AnchorLink>\n  <AnchorLink>Business Context</AnchorLink>\n  <AnchorLink>Add Managed Clusters</AnchorLink>\n  <AnchorLink>Deploy cloud native monitoring</AnchorLink>\n  <AnchorLink>Deploy Bookinfo Application</AnchorLink>\n  <AnchorLink>Deploy synthetics monitoring Point-of-Presence</AnchorLink>\n  <AnchorLink>Explore SRE Golden Signals</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n## Lab Overview\n\nMonitoring module of IBM Cloud Pak for Multicloud Management is a modern management platform, providing application-aware infrastructure monitoring and analysis for improved time to value. As a cloud-native application management platform, Monitoring provides the correct set of easy to use tools that meet the needs of development, operations, and site reliability engineering (SRE) teams. Tools needed to quickly find the root cause of an issue across a broad range of technologies, hybrid-cloud, and complex microservices architectures in all sorts of industries. Monitoring delivers app-centric monitoring of microservices-based applications in addition to monitoring for traditional resources across enterprises.\n\nMonitoring module includes IBM Cloud Event Management and gives site reliability engineers (SREs) a consistent monitoring method across the enterprise to any public or private cloud. Deploy in minutes, simplify your application management with increased flexibility, and deliver on different aspects of the application modernization journey.\nWith Monitoring, you can simplify monitoring and incident management, which helps decrease time to resolution no matter how complex the hybrid microservices-based environment.\n\nIn this tutorial, you will explore the following key capabilities:\n-\t`Understand Cloud Pak for Multicloud Management Monitoring module`\n-\t`Learn how to add cloud native monitoring to the managed cluster`\n- `learn how to gather monitoring metrics from the managed cluster`\n-\t`Learn how to use SRE Golden Signals to monitor application running on the managed cluster`\n\n***\n\n## Prerequisite\n\n- You need to provision your own copy of the CP4MCM 2.x environment, start it and verify for correct startup (check [here](../../gettingstarted/)).\n\n***\n\n## Business Context\n\nCompanies are modernizing their applications, preparing to move them to the cloud. In this process, applications are refactored to use a microservice architecture and deployed in dynamic environments like Kubernetes. Cloud-native development is way more agile than traditional methodology, which enables changes to application structure at a rapid pace. This creates a challenge for Operation teams who must maintain those applications and provide high availability of the services. With a new version of application deployed daily or weekly, there is rarely time to create bespoke monitoring dashboards and practice the troubleshooting routines. Both people and tools have to adapt to new conditions.\nIBM Cloud Pak for Multicloud Management can manage Kubernetes clusters that are deployed on any target infrastructure - either in your own data center or in a public cloud. IBM Cloud Pak for Multicloud Management includes IBM Cloud App Management to simplify monitoring your applications across any cloud environment.\nIBM Cloud Pak for Multicloud Management helps companies make the transition from traditional monitoring systems to cloud-based ones more easily. It effectively monitors all kinds of IT resources in a hybrid environment. It helps Operation teams manage hybrid environments without hiring new personnel to support each new technology that is being used by developers.\nIn this tutorial, you learn how to use IBM Cloud Pak for Multicloud Management to monitor and manage the application availability with a \"Golden Signal\" approach to monitoring your applications. This approach focuses on Latency, Errors, Traffic, and Saturation (for a quick introduction, see Simplify Application Monitoring with SRE Golden Signals).\n\nIn this tutorial, you use a Red Hat OpenShift cluster with Cloud Pak for MCM as a **Management Hub** and a second single-node cluster running MicroK8s as a **managed cluster**\n-\tHub cluster includes management console, federated monitoring, and all the controllers. \n-\tManaged cluster includes klusterlet components that communicate status back to the Hub cluster. \n\nThe relationship between hub and managed clusters is shown in the diagram below:\n\n![](images/1-cluster-mgmt-img.png)\n\nIn this tutorial, you will log in to the Hub cluster and configure the Monitoring module.\n\nYou will complete the following tasks:\n-\tAdd a managed cluster (if not done already)\n-\tDeploy cloud native monitoring to the managed cluster\n-\tVisualize monitored resources in a managed cluster\n- Install the Synthetic Monitoring Point-of-Presence\n-\tDeploy an monitored application to managed cluster\n-\tDefine the synthetic monitoring of the application and define a Service Level Objective for it\n- Explore application service topology and SRE Golden Signals provided by data collectors embeded in the application runtimes\n\n***\n\n## Add Managed Clusters\n\nIn this section, you will add a managed cluster in your Control Panel. If you have done this before as a part of [Cluster Management lab](../clustermgmt/index.mdx) you may skip to the [Next step](#deploy-cloud-native-monitoring-to-the-managed-cluster)\n\n1. To start the lab, you should be in your Cloud Pak for Multicloud Management Web Console. If you are not, check [here](../gettingstarted/) how to open your console page.\n\n   ![](images/2-cluster-mgmt-img.png)\n\n2. Now, let's explore the Cluster view. Click the hamburger **Menu** (1) and select **Automated Infrastructure -> Clusters** (2).\n\n   ![](images/2020-09-17-19-58-15.png)\n\n3. You can add a cluster by Importing an existing cluster or provisioning a new cluster using a Service Library. We use the first option. Select **Import an Existing cluster** (1) and click **Import** (2).\n\n   ![](images/2020-09-17-20-00-49.png)\n\n4. Enter **microk8s** for cluster name (1) and **microk8s** for namespace (2). Click **Generate command** to continue (3).\n\n   ![](images/2020-09-17-20-26-25.png)\n\n5. A curl command is generated that you will use to add the new cluster. Click **Copy command** button (1) and click **View cluster** (2) to see the new  managed cluster details page. \n\n   ![](images/7-cluster-mgmt-img.png)\n\n6. Go back to the desktop and open the terminal window to MicroK8s cluster clicking the **MicroK8s Terminal** link. \n\n   ![](images/2020-09-17-20-30-28.png)\n\n7. MicroK8s terminal has a yellow background. To verify the cluster status run the following command in the **MicroK8s** window\n\n  ```\n  kubectl get nodes\n  ```\n\n  ![](images/2020-09-17-20-32-22.png)\n\n  Great, you are accessing the managed cluster. Now you are ready to execute the generated command.\n\n8. **Paste** the generated command that you previously copied in the clipboard. When you run the command, several Kubernetes objects are created in the multicluster-endpoint namespace.\n\n  ![](images/2020-09-17-20-33-29.png)\n\n  If you see the error as before - just run the command again.\n\n9. You can view the progress by entering the command:\n\n  ```\n  kubectl get pods -n multicluster-endpoint\n  ```\n\n  Make sure all the pods are in the running state.\n\n  ![](images/2020-09-17-20-35-48.png)\n\n10. Back to the browser window, click **View cluster** and make sure that the cluster status is **Ready** now (if necessary, refresh the details page).\n\n  ![](images/2020-09-17-20-37-12.png)\n\n  ![](images/2020-09-17-20-38-01.png)\n\n11. On the page navigation breadcrumb, click on **Clusters** link\n\n  ![](images/2020-09-17-20-39-09.png)\n\n12. Now you can see your managed cluster in a clusters list. You need to add labels to identify your new cluster. Labels are then used by the PlacementRules and PlacementPolicies to select clusters where different applications and policies should be deployed.\n\n    In the [Cluster Management lab](../clustermgmt/index.mdx) you could learn how to add labels using a web console. Below you will use alternative methods of modifying labels using a CLI.\n\n    First, you need to install a multicluster plugin to the `cloudctl` command. Open the green terminal to the **Management Hub** and run the following commands\n\n    ```sh\n    curl -kLo cloudctl-mc-plugin https://cp-console.apps.demo.ibmdte.net/rcm/plugins/mc-linux-amd64\n    cloudctl login -a https://cp-console.apps.demo.ibmdte.net -u bob -p Passw0rd -n default\n    cloudctl plugin install -f cloudctl-mc-plugin\n    ```\n\n    Now, you can manage your remote clusters with the cli. To list the labels for **microk8s** cluster, in a green **Management Hub** terminal run:\n\n    ```sh\n    cloudctl mc describe cluster microk8s -n microk8s -c hub0\n    ```\n\n    To add a new label **environment=QA** run the following command in a green **Management Hub** terminal\n\n    ```sh\n    cloudctl mc label cluster microk8s environment=QA -n microk8s\n    ```\n\n    The remote Kubernetes cluster is now registered as a managed cluster. In the next step, you will deploy the cloud native monitoring to that mamnaged cluster.\n\n***\n\n## Deploy cloud native monitoring\n\nWhen the Cloud Pak for Multicloud Management is installed with the Monitoring module, you can automatically deploy the Kubernetes data collector to the remote managed clusters. This data collector is capable of gathering and sending to the Management Hub information about performance of all nodes, pods and other resources running in a managed cluster.\n\nTo deploy Kuberenetes data collector (also known as cloud native monitoring) complete the steps below.\n\n1. First, you need to label target cluster with **ibm.com/cloud-native-monitoring=enabled**. You can do this in web console, or run the following command in a green terminal titled **Management Hub**\n\n   ```sh\n   cloudctl mc label cluster microk8s ibm.com/cloud-native-monitoring=enabled -n microk8s\n   ```\n\n   ![](images/2020-09-27-17-05-18.png)\n\n2. Second, you need to add the target cluster namespace as a managed resource to your team. Again, you can do this in web console (Menu -> Administer -> Identity and access -> Teams tab, select the team 'operations', edit the Resources), or run the following command in a green terminal titled **Management Hub**\n\n   ```sh\n   cloudctl iam resource-add operations -r crn:v1:icp:private:k8:mycluster:n/microk8s:::\n   ```\n\n   This command adds a namespace **microk8s** (this namespace was automatically created during cluster import and contains the cluster CRD) as a managed resource to the team **operations**. This operations triggers the deployment process of cloud-native-monitoring operator to the target cluster.\n\n   You can check that the operator was deployed running the following commands in a yellow terminal connected to **MicroK8s** cluster\n\n   ```sh\n   kubectl get pods -n cp4mcm-cloud-native-monitoring\n   ```\n\n   ![](images/2020-09-27-17-15-43.png)\n\n3. Finally, you need to open the Monitoring module console as a user belonging to the operations team - user **bob** in our case. Select \"hamburger\" menu in the top-left corner and then **Monitor health** (2) and **Infrastructure monitoring**.\n\n   ![](images/2020-09-27-17-21-27.png)\n\n   If you are redirected to login page, login again as user **bob** with password **Passw0rd**. Eventually, you should see the **Resources** tab shown below:\n\n   ![](images/2020-09-27-17-23-53.png)\n\n   The page probably won't show any resources yet, because the process to install Kubernetes data collector was just started. You can check if it was successfully deployed running the previous command again (in yellow terminal).\n\n   ![](images/2020-09-30-12-44-36.png)\n\n   When it is deployed, after 1-2 minutes you can refresh the browser, and you should see the view showing now all the resources from the managed cluster.\n\n   ![](images/2020-09-27-17-32-27.png)\n\n   Click the **Kubernetes cluster**.\n\n   ![](images/2020-09-27-17-34-20.png)\n\n   Then click **microk8s**.\n\n   ![](images/2020-09-27-17-35-36.png)\n\n   The next view, let you explore the metrics and events releated to the selected resource. On top, you can see the Event timeline (1) for wihich you can change the time window (from 30 minutes to 1 week). Deployment topology widget (2) shows how the specific resource is located within the cluster. \n\n   ![](images/2020-09-27-17-40-30.png)\n\n   If you hover over the numbers on the Timeline (1) you can see the details of the events. You can also click the 'How do I read this' link (2) on the Deployment topology to learn hot to use that widget.\n\n   ![](images/2020-09-27-17-44-10.png)\n\n   ![](images/2020-09-27-17-45-38.png)\n\n   Feel free to explore other resources and their metrics. For example you can click the worker node icon on the Deployment topology widget.\n\n   ![](images/2020-09-27-17-49-48.png)\n\n***\n\n## Deploy Bookinfo Application\n\nOn top of monitoring Linux worker nodes and basic Kubernetes objects Operations teams want are responsible for monitoring business applications. So let's deploy sample application, called Bookinfo\n\n1. To start, clone the git repository containing the yaml files needed to deploy the application. Using the green terminal window, run the following commands on the **Management Hub**\n\n   ```sh\n   git clone https://github.com/dymaczew/charts\n   cd charts\n   ```\n\n2. Apply the application resources running the following commands:\n\n   ```sh\n   /home/ibmuser/oclogin.sh\n   oc apply -f bookinfo-multiclister-2020.2.1\n   oc apply -f kubernetes-1.18-ingress-deployable.yaml\n   ```\n\n   If you happen to run Kubernetes 1.19 on the your managed cluster (outside the Skytap environment) use kubernetes-1.19-ingress-deployable.yaml. Ingress API was changed in 1.19 and extended with new mandatory fields\n\n   The output looks like the following:\n\n   ![](images/2020-09-30-13-38-44.png)\n\n   Don't worry about the error in the last line - it just means that ImagePolicy admission controller is not used in the environment.\n\n3. Now, let's edit the placement rule for the application to get it deployed on the managed cluster (we tagged in with label \"environment=QA\"). Navigate to application view, selecting the \"hamburger\" menu in the top-left corner, then **Observe environments** and **Overview**\n\n   ![](images/2020-09-30-13-48-03.png)\n\n   On the overview page, scroll down to the Applications section and select **bookinfo-app** link. We recommend this way, becasue for some reason (probably a bug?) the application is not listed directly on the Hybrid Applications list\n\n   ![](images/2020-09-30-13-50-11.png)\n\n4. When the Application view opens, click on the **bookinfo-rule** icon\n\n   ![](images/2020-09-30-13-51-45.png)\n\n5. Edit the placement rule in the editor on the right, changing the value of the label from **Dev** to **QA** (1) and then apply you changes with the button on top of the editor(2)\n\n   ![](images/2020-09-30-13-56-39.png)\n\n6. After a few seconds, you should notice that the application is now being placed on the **microk8s** cluster. The deployment takes usually 1-2 minutes needed to pull images and start containers.\n\n   ![](images/2020-09-30-18-55-48.png)\n\n7. You can verify if the application was successfuly deployed and is accessible by opening a new browser tab and entering the URL: `bookinfo.10.0.0.2.nip.io`. You should reach the page that looks like below:\n\n   ![](images/2020-09-30-19-50-18.png)\n   \n***\n\n## Exploring synthetics monitoring\n\nCloud Pak for Multicloud Management is capable of monitoring the application availability using a synthetic transaction monitoring. There is a default agent installed on the Hub cluster that automatically starts monitoring any ingress object that is deployed as a part of Hybrid application. Let's check how it looks like.\n\n1. Open the Monitoring module interface (Select \"hamburger\" menu, then **Monitor Health**, then **Infrastructure monitoring**). Then select the **Synthetic results** tab\n\n   ![](images/2020-09-30-20-01-54.png)\n\n2. On the page Synthetic results page, you should see the automatically configured monitor for ingress deployed as a part of Bookinfo application. Click on the monitor name to explore details\n\n   ![](images/2020-09-30-20-03-37.png)\n\n3. You can adjust the scope of the timeline, reducing the windows to last 30 minutes (1). You can also select to see a Response time graph or a response time Breakdown (2). This helps to diagnose issues related to name resolution on establishing the SSL session.\n\n   ![](images/2020-09-30-20-11-38.png)\n\n4. When you scroll down you can see the results of actual tests. Select any dot on the graph to see detailed breakdown of the response.\n\n   ![](images/2020-09-30-20-13-53.png)\n\n   You can deploy more agents in different locations to have your applications tested for availability and response time from a customer perspective. Deploying own agents allows also to configure more sophisticated test schedules. Let's see how it works.\n\n5. Go to the green terminal titled **Management hub** and run the following commands to unpack the synthetics agent binaries that were downloaded for you.\n\n   ```sh\n   cd\n   tar xvf app_mgmt_syntheticpop_xlinux.tar.gz\n   cd app_mgmt_syntheticpop_xlinux\n   ```\n6. To configure the synthetic monitoring agent you need a config pack that will instruct agent where to look for test definitions and where to send the gathered data. Go back to you browser, click the **Synthetic results** breadcrumb in the top-left corner of the screen. Then select the Administration tab.\n\n   ![](images/2020-10-01-12-00-43.png)\n\n   ![](images/2020-10-01-12-02-04.png)\n\n7. On the Administration view select the **Integrations** tile, then **New integration** button.\n\n   ![](images/2020-10-01-13-00-10.png)\n\n   ![](images/2020-10-01-13-01-05.png)\n\n8. Click **Configure** under the **Monitoring Data Collectors** tile\n\n   ![](images/2020-10-01-13-02-18.png)\n\n9. Do not provide any name, just click the **Download file** button and save the file to your workstation\n\n   ![](images/2020-10-01-13-03-26.png)\n\n   ![](images/2020-10-01-12-58-21.png)\n\n10. Go back to the green terminal titled **Management Hub** and run the following commands to preconfigure and install the Synthetic Monitoring agent\n\n    ```sh\n    ./config-pop.sh -f /home/ibmuser/Downloads/ibm-cloud-apm-dc-configpack.tar\n    ```\n\n    Answer the installation wizard with the following values:\n    \n    ```sh\n    You will configure a new local point of presence (PoP).\n\n    Enter a name for your PoP. Your PoP will be identified by this name: pop_user1 -- A point of presence name\n    The PoP name is set to pop_user1\n\n    Enter the name of the country in which your PoP is located: USA -- Use any country\n    The country name is set to USA\n\n    Enter the name of the city in which your PoP is located: Las Vegas -- Use any city\n    The city name is set to Las Vega\n\n    Enter a description of your PoP (optional): pop_user1 -- It is just descritpion\n    The description is set to \"pop_user1\"\n\n    Enter the proxy server address for communicating with IBM ICAM server. The address format is ip:port (Press Enter if you do not need to use a proxy) :  Press Enter\n    Proxy server address for communicating with IBM ICAM server is set to \n\n    Update the proxy type (no | manual | pac) for playbacking synthetic tests to monitor your web applications. Enter 'no' to choose no proxy. Enter 'manual' to configure your proxy with a proxy server ip address and port number. Enter 'pac' to use an automatic configuration URL. (Press Enter if you do not want to make any changes: no): Press Enter\n\n    Playback proxy type is set to no\n\n    Your PoP is configured with the following details:\n    LOCATION=\"pop_user1,USA,Las Vegas,0,0,pop_user1\"\n    AGENT_PROXY_SERVER=\"\"\n    PLAYBACK_PROXY_TYPE=\"no\"\n    PLAYBACK_PROXY_HOST_PORT=\"\"\n    PLAYBACK_PROXY_BYPASS=\"\"\n    PLAYBACK_PROXY_CONFIG_URL=\"\"\n    CACHE_REDIS_MAX_SIZE_MB=\"\"\n\n    Do you confirm? [y for yes or n for no]: Press 'y'\n    pop.properties is configured! You can run start-pop.sh to start your PoP.\n    ```\n\n    Finally, run the following command to start the agent:\n\n    ```sh\n    ./start-pop.sh\n    ```\n\n11. Now, when you have additional Point-of-Presence (syntectic monitoring agent) installed, go back to your browser and navigate to the **Administration** page, and then select the **Synthetics** tile.\n\n    ![](images/2020-10-01-17-40-45.png)\n\n    Click **Create** button\n\n    ![](images/2020-01-15-13-33-53.png)\n\n    Give your test a name and description.\n\n    ![](images/2020-01-15-13-35-24.png)\n\n    Scroll down and select the test type (Webpage). You can notice there are other types of tests available - you can for example replay web session recorded with Selenium, or create API tests using either SOAP or REST APIs.\n\n    ![](images/2020-01-15-13-36-26.png)\n\n    In the next step you need to provide the URL of the bookinfo main application page. Scroll down and provide the following values:\n\n    URL: http://bookinfo.10.0.0.2.nip.io:9080/productpage?u=normal\n\n    **IMPORTANT** Use the above URL, don't worry that the screenshots below shows differnt one!\n\n    Threshold value for Warning: 1\n\n    Threshold value for Critical: 2\n\n    ![](images/2020-02-05-12-19-02.png)\n\n    Click **Verify test**\n\n    ![](images/2020-01-15-13-49-36.png)\n\n    ![](images/2020-01-15-13-51-17.png)\n\n    On the next page, change the test frequency to 1 minute and make sure that your previously installed PoP agent is selected\n\n    ![](images/2020-01-15-17-11-44.png)\n\n    Click **Finish** at the bottom of the page\n\n    ![](images/2020-01-15-17-09-11.png)\n\n    Now, you have synthetics agent that will generate the traffic against the Bookinfo application. You can move to the final part of the tutorial, exploring tools available for Site Reliability Engineers.\n\n***\n\n## Explore SRE Golden Signals\n\n   During this lab exercise, you will be exploring the Golden Signals.  The Golden Signals are a way of normalizing the performance KPIs to make it easier and more intuitive for an SRE to debug a problem.\n\n1. In the browser with the Cloud Pak user interface, click the Resources tab\n\n   ![](images/2020-01-19-17-21-00.png)\n\n2. Select \"Kubernetes Services\"\n\n   You will see a list of kubernetes services that are running in your environment\n\n   ![](images/2020-01-19-17-25-00.png)\n\n3. Click the link for the \"productpage\" resource\n\n   You will navigate to the page for the productpage microservice.  Let's explore this page as seen below\n\n   ![](images/2020-01-19-17-31-00.png)\n\n4. Deployment topology\n\n   In the upper left corner, you see the \"Deployment topology\".  You've seen this before in the context of the kubernetes cluster.  Now, you're viewing it in the context of the productpage microservice.  What the topology is showing you is that this microservice is deployed to one pod on one node in the cluster.  If you scaled out the deployment to 2 pods, then you would see 2 pods in the Deployment topology.\n\n5. Golden Signals\n\n   Next, look at the golden signals on the right side of the page.   The 4 graphs labeled Latency, Errors, Traffic, and Saturation are the Golden Signals.  These are the most important metrics for Site Reliability Engineering (SRE) as they show the metrics imoprtant from the end-user perspective, that have been normalized for different application/middleware domains.  Let's explore Latency a little more.\n\n6. Latency\n\n   Flyover the Latency Graph.  You'll see a graph showing the latency shown in different percentiles (50th, 90th, and 95th).  By using percentiles, you get a much better idea how the applicaiton is performing.\n\n   ![](images/2020-01-19-17-40-00.png)\n\n   Next, select the dropdown list in the Filter.  The default behavior is to show 50th, 90th, and 95th percentile for all URLs.  But, sometimes you want to filter the data.  \n\n   ![](images/2020-01-20-08-12-32.png)\n\n   Select 1 or more of the URLs for the productpage microservice\n\n   View the latency data for the URLs that you selected.\n\n   Within filters, select the icon on the far right for the \"/productpage?u=normal\" URL.\n\n   ![](images/2020-01-20-08-16-32.png)\n\n   After you click the icon, you will see some very useful information as seen below.  At the top of the page, you see a scatter plot chart that allows you to see a distribution of the requests.  This is a very useful way to visualize the transactions because it allows you to see patterns and outliers.  \n\n   Below that, expand one of the requests and you will see a breakdown of where the request spent its time.\n\n   ![](images/2020-01-19-19-59-00.png)\n\n   Close the Trace Breakdown window by clicking the \"X\" in the upper right corner.\n\n   ![](images/2020-01-20-08-19-27.png)\n\n   Now, click the 3 vertical dots in the upper right corner of the Latency graph and select \"Latency Options\"\n\n   ![](images/2020-01-20-08-21-09.png)\n\n   Notice that you can customize the latency options.  Either change the latency percentiles or add/delete lines from the graph.  Try it out.\n\n   ![](images/2020-01-19-17-49-00.png)\n\n7. Next, examine the Service dependencies\n\n   ![](images/2020-01-21-08-48-36.png)\n\n   The service dependency shows a 1-hop topology of the microservices.  For the productpage service, it shows that there are clients connecting to the service and there is a dependency on \"details\" and \"reviews\".  \n\n   Click on \"reviews\" icon.  You will navigate to that microservice and see the 1-hop topology for the \"review\" service.  Examine the golden signals for the \"reviews\" service.  \n\n8. Full Service Topology\n\n   Most of the time, the 1-hop topology is good enough to diagnose the root cause of a problem.  But, sometimes you need to see additional information.  Click the **\"expand to the full screen\"** icon in the upper right corner of the service dependencies to expand the view.\n\n   ![](images/2020-01-20-08-30-45.png)\n\n   The view you see comes from an embedded capability called Agile Service Manager (ASM).  ASM allows you to expand to more than hop in the topology. It also allows you to visualize changes that are occurring in the application.  Since change introduces most of the problems in IT, this is a powerful capability.\n\n   ![](images/2020-01-19-19-46-00.png)\n\n   Let's start by switching to a 2-hop topology.  Select the dropdown in the top-middle of the screen and change the value to \"2\".  Then click \"Render\"\n\n   ![](images/2020-01-22-09-51-29.png)\n\n   We won't examine it here, but ASM allows you to hide/show some additional objects in the topology.  In this topology, you see the microservice topology.  If you want, you can add the pods into the topology.  To add/hide elements on the page, click the **Filter** icon to the left of the \"Render\" button.\n\n   ![](images/2020-01-20-08-36-10.png)\n\n   ASM has powerful capabilities to show you what's changing.  This includes topology changes, state changes, and property changes.  We won't be exploring that capability since there haven't been any changes to the application.  Feel free to explore additional ASM capabilities.  When you are done exploring, you can click on one of the icons for the microservices and you will navigate back to the Golden Signal view.\n\n9. Drill Down into the Runtime\n\n   Sometimes you need additional details that can only be gathered from the data collector that is running within the runtime.  If the app server (python, Node.js, JVM, golang) is instrumented with a lightweight data collector, you can click on the container and drilldown into the runtime metrics.  \n\n   Click on the \"container\" in the Deployment topology.\n\n   ![](images/2020-01-20-08-40-27.png)\n\n   You are now viewing the detailed container metrics for this microservice. To navigate to the detailed metrics reported by the data collector, scroll down and click the appropriate name in **Related resources** window.\n\n   ![](images/2020-01-20-08-42-07.png)\n\n   The runtime page shows selection of most important metrics for a selected runtime type\n\n   ![](images/2020-01-20-08-44-30.png)\n\n   To expore any other metric, scroll down the page and expand the **Custom metrics** section, picking the metric you want and additional filtering and display options.\n\n   ![](images/2020-01-20-08-47-50.png)\n\n   This concludes the exercise. You now understand how to naviagate Golden Signals view.\n\n   Additional resources: \n   - [Golden Signals video on YouTube](https://youtu.be/z5WLD6vANvw)\n   - [Blog: Golden Signals explained](https://www.ibm.com/cloud/blog/video-better-application-monitoring-with-sre-golden-signals)\n\n***\n\n## Summary\n\nYou completed the Cloud Pak for Multicloud Management tutorial: Monitoring and using SRE Golden Signals. Throughout the tutorial, you explored the key takeaways:\n-\t`Understand Cloud Pak for Multicloud Management Monitoring module`\n-\t`Learn how to add cloud native monitoring to the managed cluster`\n- `learn how to gather monitoring metrics from the managed cluster`\n-\t`Learn how to use SRE Golden Signals to monitor application running on the managed cluster`\n\nIf you would like to learn more about Cloud Pak for Multicloud Management, please refer to:\n-\t<a href=\"https://www.ibm.com/cloud/cloud-pak-for-management\" target=\"blank\">Cloud Pak for Multicloud Management home page</a>\n- <a href=\"https://www.ibm.com/demos/collection/Cloud-Pak-for-Multicloud-Management\" target=\"blank\">Cloud Pak for Multicloud Management Demos </a>\n","fileAbsolutePath":"/Users/dymaczew/Documents/_code/mcm/cp4mcm-demohub/src/pages/labs/monitoring/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","227138135","227138135","2456312558","2746626797","2746626797","3018647132","3018647132","3906363820","3906363820","768070550"]}