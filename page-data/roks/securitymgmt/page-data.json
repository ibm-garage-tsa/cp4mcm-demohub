{"componentChunkName":"component---src-pages-roks-securitymgmt-index-mdx","path":"/roks/securitymgmt/","result":{"pageContext":{"frontmatter":{"title":"Lab 3 - Security & Compliance Management - ROKS","description":"Security & Compliance Management with IBM Cloud Pak for Multicloud Management"},"relativePagePath":"/roks/securitymgmt/index.mdx","titleType":"page","MdxNode":{"id":"98449b4a-f3b7-554e-a6f7-cc2d5704fae5","children":[],"parent":"b42fba42-9001-5dc4-8a7a-768c9a8a200b","internal":{"content":"---\ntitle: Lab 3 - Security & Compliance Management - ROKS\ndescription: Security & Compliance Management with IBM Cloud Pak for Multicloud Management\n---\n\n<FeatureCard\n  title=\"Security & Compliance Management with IBM Cloud Pak for Multicloud Management\"\n  color=\"dark\"\n  >\n\n![banner](/images/secmgmt-banner.jpg)\n\n</FeatureCard>\n\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisite</AnchorLink>\n  <AnchorLink>Business Context</AnchorLink>\n  <AnchorLink>Namespace Policy</AnchorLink>\n  <AnchorLink>Network Policy</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\nNote: 'This lab is to be used for CP4MCM 2.1.X on ROKS.'\n\n\n***\n\n## Lab Overview\n\nIBM Cloud Pak for Multicloud Management provides consistent visibility, automation, and governance across a range of multicloud management capabilities such as cost and asset management, infrastructure management, application management, multi-cluster management, edge management, and integration with existing tools and processes. Customers can leverage Cloud Pak for Multicloud Management to simplify their IT and application ops management, while increasing flexibility and cost savings with intelligent data analysis driven by predictive signals.\n\nIBM Cloud Pak for Multicloud Management helps companies make the transition from traditional monitoring systems to cloud-based ones more easily. It effectively monitors all kinds of IT resources in a hybrid environment. It helps Operation teams manage hybrid environments without hiring new personnel to support each new technology that is being used by developers.\n\nThis Tutorial explores how to use governance and compliance features to manage your multicloud environments with a consistent set of configuration and security policies across all applications and clusters.You explore the following key capabilities:\n-\t`Understand Cloud Pak Policy and Governance`\n-\t`Learn to create and customize policies with the out of the box policy templates`\n-\t`Learn to use namespace policies`\n-\t`Learn to use network policies`\n\n***\n\n## Prerequisite\n\n- You need to have your personal CP4MCM on ROKS environment (check [here](../../environment/overview/) how to request it).\n- You need to pre-install all necessaries CLI tools (check [here](../installcli/) how to install them).\n- If you didn't complete the Lab 1 - Multicluster Management, you need, at least, to complete the steps of [Add Managed Clusters](https://pages.github.ibm.com/demohub/cloudpak-mcm/labs/clustermgmt/#add-managed-clusters) to have your clusters ready on CP4MCM to be able to follow this lab.\n\n***\n\n## Business Context\n\nAs a member of the Security Operation (SecOps) team, you are having problems to minimize risks and identify policies violations in your multicloud hybrid world. Manage a Security Policy for all your cloud-based services and data across multiple providers is overwhelming your team.\nYour company is deploying multiple Kubernetes clusters to address their specific needs. Some Dev teams are deploying clusters across public and private clouds, and some are deploying clusters across regions, and some are deploying clusters to support the development and test needs.\n\nAs different teams deploy more clusters, new challenges are introduced:\n-\tHow do I set consistent security policies across environments?\n-\tWhich clusters are compliant?\n\nBecause of that, you want to explore how IBM Cloud Pak for Multicloud Management, provides consistent visibility, governance and automation of your complex environment.\n\nIBM Cloud Pak for Multicloud Management Governance and risk dashboard allows you to view and manage the number of security risks and policy violations in your clusters and applications. Policy templates are used to create one or more policies for third party or external security controls. For example, you can create a mutation policy with the mutation policy controller. Each policy document can have at least one or multiple templates.\n\nBy using policy-based role and compliance management, you are able to:\n-\tSet and enforce polices for security, applications, and infrastructure or auto enforcement at the cluster level.\n-\tCheck compliance against deployment parameters, configuration, and policies.\n-\tAutomatically remediate violations.\n\nIn this tutorial, you create and enforce the following governance policies:\n-\t`Namespace policy`\n-\t`Network policy`\n\n***\n\n## Namespace Policy\n\nKubernetes namespaces help organize cluster resources between multiple users and split the resource quote. Cluster administrator might restrict the user to use specific namespaces for applications. The namespace policy allows you to catch cluster violations when namespaces are not defined as per the policies.\n\nA sample namespace policy resemble the following:\n\n  ![](images/1-sec-mgmt-img.png)\n\nIn this section, you create a policy that ensures that a specified namespace is present in clusters that match the selection criteria.\n\n1.Open the **Terminal** window.\n\n2.Let's use the ROKS Managed Cluster context:\n\n```\nkubectl config use-context roks-managed-cluster\n```\n\n3.Later you will create a Policy to inform/enforce a namespace in your cluster. Let’s verify that you don’t have this namespace by now. Run the command below:\n\n```\noc get ns | grep k8demo\n```\n\n  ![](images/3-namespace-policy-image.png)\n\n  So far, you don’t have the k8demo namespace. Great! Let’s create a Policy to inform when your cluster is not compliance with a namespace policy.\n\n4.Back to the IBM Cloud Pak for Multicloud Management Web Console page on your browser (If you don't have the CP4MCM Console opened, check [here](../beforestart/) how to access it).\n\n  On the top-left of the page, open the **Menu** (1) and select **Govern risk** (2).\n\n  ![](images/4-namespace-policy-image.png)\n\n5.Here you see the Policy tab. This view displays the policies that have been created and the dashboard of policy compliance for each cluster. By now, you don’t have any Policy created. Let’s do it! Click **Create policy**.\n\n  ![](images/5-namespace-policy-image.png)\n\n6.On the Name field type **policy-namespace** (1), on the Namespace field select **default** (2), on the Specifications field select **namespace** (3) and on Cluster binding select **environment: QA** (4).\n\n  ![](images/6-namespace-policy-image.png)\n\n7.Now, let’s change the namespace name value. In the YAML file section, on the right, change the name attribute from prod to **k8demo**. With that, you are creating a Policy to verify if you have a k8demo namespace/project in your cluster.\n\n  ![](images/7-namespace-policy-image.png)\n\n8.Notice that the policy is set to inform rather than enforce. With value inform, the policy only reports whether the cluster is compliant to the specified policies. With value enforce, the policy provides automatic remediation. Keep inform value by now.\n\n  ![](images/8-namespace-policy-image.png)\n\n9.Click the button **Create** to create your new policy.\n\n  ![](images/9-namespace-policy-image.png)\n\n10.In a few seconds, the policy controller will check if the namespace k8demo is present and provides information regarding the current compliance of the policies.\nRemember, you did not enforce this policy. Instead we specified inform. As such, the Governance and risk view displays a policy violation in our cluster, as illustrated below.\n\n  ![](images/10-namespace-policy-image.png)\n\n11.Click the **Resource violations** link to find which cluster is violating the policy.\n\n  ![](images/11-namespace-policy-image.png)\n\n12.The managed-roks cluster is in violation of the policy which requires a namespace that is called “k8sdemo” to exist.\n\n13.The managed-roks is the same cluster that you verified in the first step of this section that k8sdemo namespace does not exist. Hence it shows that there is no namespace k8demo in the cluster.\n\n  ![](images/13-namespace-policy-image.png)\n\n14.Now, let’s verify the k8demo namespace still does not exist. Back to the terminal window, run the command below:\n\n```\noc get ns\n```\n\n  ![](images/14-namespace-policy-image.png)\n\n  There should not be a namespace named k8demo listed, which indicates that the policy did not enforce it to be created.\n\n15.Back to the browser. Now, let’s change the policy to be enforced. In the policies view, click on **POLICY VIOLATIONS**.\n\n  ![](images/15-namespace-policy-image.png)\n\n16.Click the **policy-namespace** link.\n\n  ![](images/16-namespace-policy-image.png)\n\n17.Open the **YAML** tab.\n\n  ![](images/17-namespace-policy-image.png)\n\n18.Click the **Edit** button to go into edit mode to modify the YAML file.\n\n  ![](images/18-namespace-policy-image.png)\n\n19.Change the value of remediationAction: inform to **remediationAction: enforce**.\n\n  ![](images/19-namespace-policy-image.png)\n\n20.Click the **Submit** button to save the change.\n\n  ![](images/20-namespace-policy-image.png)\n\n21.Open the **Details** tab.\n\n  ![](images/21-namespace-policy-image.png)\n\n22.A few seconds later, the policy violation is automatically removed.\n\n  ![](images/22-namespace-policy-image.png)\n\n23.Open the **Violations** tab.\n\n  ![](images/23-namespace-policy-image.png)\n\n24.You also can validate the same from the Violations view: No Violations are available.\n\n  ![](images/24-namespace-policy-image.png)\n\n25.Now, let’s check how the policy on enforce mode, removed the violation. Back to the terminal window, run the command below, to ensure that the k8demo namespace is created in the cluster.\n\n```\noc get project | grep k8demo\n```\n\n  ![](images/25-namespace-policy-image.png)\n\n  You have successfully implemented the Namespace Policy!\n\n***\n\n## Network Policy\n\nA network policy is a specification of how groups of pods are allowed to communicate with each other and other network endpoints.NetworkPolicy resources use labels to select pods and define rules which specify what traffic is allowed to the selected pods.\n\nApply the network policy to define which network request to deny. For more information about network policies, refer to this [documentation](https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/).\n\nA sample network policy resembles the following:\n\n  ![](images/0-network-policy-image.png)\n\nIBM Cloud Pak for Multicloud Management enables your team to check and enforce network policy compliance against your multiple clusters in your hybrid environment.\n\nIn this section, you learn how to create a Network Policy in IBM Cloud Pak for Multicloud Management. This lab needs an application that has at least two pods with services where one pod needs to connect to other pod's associated service. You will use the application Quote of the Day that is already deployed on the cluster in the default project.\n\n1.Back to the CP4MCM Console page tab on your browser, click **Policies** link on navigation breadcrumb.\n\n  ![](images/1-network-policy-image.png)\n\n2.On the Policies view, click **New policy**.\n\n  ![](images/2-network-policy-image.png)\n\n3.Enter **policy-network** as name of the policy (1), select **default** as namespace (2), on specifications field choose **NetworkPolicy – deny network request** (3). On the cluster binding field select **environment: QA** (4).\n\n  ![](images/3-network-policy-image.png)\n\n4.On the YAML file editor, change the objectDefinition > metadata > name from deny-from-other-namespaces to **deny-all-ingress-egress-traffic**.\n\n  ![](images/4-network-policy-image.png)\n\n5.The spec section is defined as follow:\n```\nspec:\n\tpodSelector: {}\n\tpolicyTypes:\n\t\t- Ingress\n\t\t- Egress\n```\n\n  ![](images/5-network-policy-image.png)\n\n6.Keep remediationAction as inform by now. Click **Create**.\n\n  ![](images/6-network-policy-image.png)\n\n7.After few seconds, you should check that the policy violation was detected but not enforced.\n\n  ![](images/7-network-policy-image.png)\n\n  Because the policy is on inform mode, the policy is not forced.\n\n8.Scroll down, and click on the new policy: **policy-network**.\n\n  ![](images/8-network-policy-image.png)\n\n9.You see that one decision is in violation.\n\n  ![](images/9-network-policy-image.png)\n\n10.Click the **Violations** tab.\n\n  ![](images/10-network-policy-image.png)\n\n11.Here you see the violation about network isolation. Your local-cluster is not compliance with this network policy. Let’s fix it!\n\n  ![](images/11-network-policy-image.png)\n\n12.Click on **managed-roks** link to open the OpenShift Web Console of your Managed Cluster.\n\n  ![](images/12-network-policy-image.png)\n\n13.Use the side bar menu and select **Networking > Network Policies**.\n\n  ![](images/14-network-policy-image.png)\n\n14.Click the **Create Network Policy** button.\n\n  ![](images/15-network-policy-image.png)\n\n15.On the right, open the **Samples** tab.\n\n![](images/15_2-network-policy-image.png)\n\n16.On the Samples tab, there are a list of policy samples. Fortunately for us, there is a Network Policy Sample that we can use.  Click the **Try it** link (1).  Then edit the YAML, by replacing deny-other-namespaces to **deny-all-ingress-egress-traffic** (2).  Click the **Create** button to create this policy (3).\n\n  ![](images/16-network-policy-image.png)\n\n17.Great the policy is created now.\n\n  ![](images/17-network-policy-image.png)\n\n18.Go back to the CP4MCM browser tab.  You should notice that there are no violations now (wait 10 seconds if you have to).\n\n  ![](images/18-network-policy-image.png)\n\n19.Click on **Policies** link in breadcrumbs, to go back to the Policies page.\n\n  ![](images/19-network-policy-image.png)\n\n20.After waiting 10 seconds, you should see that all violations are gone.\n\n  ![](images/20-network-policy-image.png)\n\nGreat! You have successfully implemented Network Policy!\n\n***\n\n## Summary\n\nYou completed the Cloud Pak for Multicloud Management tutorial: Security & Compliance Management. IBM Cloud Pak for Multicloud Management governance, risk and compliance framework helps create custom policy controllers. You learned in the Lab how to create and customize policies with the out of the box policy templates.\n\nIf you would like to learn more about Cloud Pak for Multicloud Management, please refer to:\n-\t<a href=\"https://www.ibm.com/cloud/cloud-pak-for-management\" target=\"blank\">Cloud Pak for Multicloud Management home page</a>\n- <a href=\"https://www.ibm.com/demos/collection/Cloud-Pak-for-Multicloud-Management\" target=\"blank\">Cloud Pak for Multicloud Management Demos </a>\n","type":"Mdx","contentDigest":"fc3a950cac839b19a31fa95dcdcb7e44","counter":1494,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Lab 3 - Security & Compliance Management - ROKS","description":"Security & Compliance Management with IBM Cloud Pak for Multicloud Management"},"exports":{},"rawBody":"---\ntitle: Lab 3 - Security & Compliance Management - ROKS\ndescription: Security & Compliance Management with IBM Cloud Pak for Multicloud Management\n---\n\n<FeatureCard\n  title=\"Security & Compliance Management with IBM Cloud Pak for Multicloud Management\"\n  color=\"dark\"\n  >\n\n![banner](/images/secmgmt-banner.jpg)\n\n</FeatureCard>\n\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisite</AnchorLink>\n  <AnchorLink>Business Context</AnchorLink>\n  <AnchorLink>Namespace Policy</AnchorLink>\n  <AnchorLink>Network Policy</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\nNote: 'This lab is to be used for CP4MCM 2.1.X on ROKS.'\n\n\n***\n\n## Lab Overview\n\nIBM Cloud Pak for Multicloud Management provides consistent visibility, automation, and governance across a range of multicloud management capabilities such as cost and asset management, infrastructure management, application management, multi-cluster management, edge management, and integration with existing tools and processes. Customers can leverage Cloud Pak for Multicloud Management to simplify their IT and application ops management, while increasing flexibility and cost savings with intelligent data analysis driven by predictive signals.\n\nIBM Cloud Pak for Multicloud Management helps companies make the transition from traditional monitoring systems to cloud-based ones more easily. It effectively monitors all kinds of IT resources in a hybrid environment. It helps Operation teams manage hybrid environments without hiring new personnel to support each new technology that is being used by developers.\n\nThis Tutorial explores how to use governance and compliance features to manage your multicloud environments with a consistent set of configuration and security policies across all applications and clusters.You explore the following key capabilities:\n-\t`Understand Cloud Pak Policy and Governance`\n-\t`Learn to create and customize policies with the out of the box policy templates`\n-\t`Learn to use namespace policies`\n-\t`Learn to use network policies`\n\n***\n\n## Prerequisite\n\n- You need to have your personal CP4MCM on ROKS environment (check [here](../../environment/overview/) how to request it).\n- You need to pre-install all necessaries CLI tools (check [here](../installcli/) how to install them).\n- If you didn't complete the Lab 1 - Multicluster Management, you need, at least, to complete the steps of [Add Managed Clusters](https://pages.github.ibm.com/demohub/cloudpak-mcm/labs/clustermgmt/#add-managed-clusters) to have your clusters ready on CP4MCM to be able to follow this lab.\n\n***\n\n## Business Context\n\nAs a member of the Security Operation (SecOps) team, you are having problems to minimize risks and identify policies violations in your multicloud hybrid world. Manage a Security Policy for all your cloud-based services and data across multiple providers is overwhelming your team.\nYour company is deploying multiple Kubernetes clusters to address their specific needs. Some Dev teams are deploying clusters across public and private clouds, and some are deploying clusters across regions, and some are deploying clusters to support the development and test needs.\n\nAs different teams deploy more clusters, new challenges are introduced:\n-\tHow do I set consistent security policies across environments?\n-\tWhich clusters are compliant?\n\nBecause of that, you want to explore how IBM Cloud Pak for Multicloud Management, provides consistent visibility, governance and automation of your complex environment.\n\nIBM Cloud Pak for Multicloud Management Governance and risk dashboard allows you to view and manage the number of security risks and policy violations in your clusters and applications. Policy templates are used to create one or more policies for third party or external security controls. For example, you can create a mutation policy with the mutation policy controller. Each policy document can have at least one or multiple templates.\n\nBy using policy-based role and compliance management, you are able to:\n-\tSet and enforce polices for security, applications, and infrastructure or auto enforcement at the cluster level.\n-\tCheck compliance against deployment parameters, configuration, and policies.\n-\tAutomatically remediate violations.\n\nIn this tutorial, you create and enforce the following governance policies:\n-\t`Namespace policy`\n-\t`Network policy`\n\n***\n\n## Namespace Policy\n\nKubernetes namespaces help organize cluster resources between multiple users and split the resource quote. Cluster administrator might restrict the user to use specific namespaces for applications. The namespace policy allows you to catch cluster violations when namespaces are not defined as per the policies.\n\nA sample namespace policy resemble the following:\n\n  ![](images/1-sec-mgmt-img.png)\n\nIn this section, you create a policy that ensures that a specified namespace is present in clusters that match the selection criteria.\n\n1.Open the **Terminal** window.\n\n2.Let's use the ROKS Managed Cluster context:\n\n```\nkubectl config use-context roks-managed-cluster\n```\n\n3.Later you will create a Policy to inform/enforce a namespace in your cluster. Let’s verify that you don’t have this namespace by now. Run the command below:\n\n```\noc get ns | grep k8demo\n```\n\n  ![](images/3-namespace-policy-image.png)\n\n  So far, you don’t have the k8demo namespace. Great! Let’s create a Policy to inform when your cluster is not compliance with a namespace policy.\n\n4.Back to the IBM Cloud Pak for Multicloud Management Web Console page on your browser (If you don't have the CP4MCM Console opened, check [here](../beforestart/) how to access it).\n\n  On the top-left of the page, open the **Menu** (1) and select **Govern risk** (2).\n\n  ![](images/4-namespace-policy-image.png)\n\n5.Here you see the Policy tab. This view displays the policies that have been created and the dashboard of policy compliance for each cluster. By now, you don’t have any Policy created. Let’s do it! Click **Create policy**.\n\n  ![](images/5-namespace-policy-image.png)\n\n6.On the Name field type **policy-namespace** (1), on the Namespace field select **default** (2), on the Specifications field select **namespace** (3) and on Cluster binding select **environment: QA** (4).\n\n  ![](images/6-namespace-policy-image.png)\n\n7.Now, let’s change the namespace name value. In the YAML file section, on the right, change the name attribute from prod to **k8demo**. With that, you are creating a Policy to verify if you have a k8demo namespace/project in your cluster.\n\n  ![](images/7-namespace-policy-image.png)\n\n8.Notice that the policy is set to inform rather than enforce. With value inform, the policy only reports whether the cluster is compliant to the specified policies. With value enforce, the policy provides automatic remediation. Keep inform value by now.\n\n  ![](images/8-namespace-policy-image.png)\n\n9.Click the button **Create** to create your new policy.\n\n  ![](images/9-namespace-policy-image.png)\n\n10.In a few seconds, the policy controller will check if the namespace k8demo is present and provides information regarding the current compliance of the policies.\nRemember, you did not enforce this policy. Instead we specified inform. As such, the Governance and risk view displays a policy violation in our cluster, as illustrated below.\n\n  ![](images/10-namespace-policy-image.png)\n\n11.Click the **Resource violations** link to find which cluster is violating the policy.\n\n  ![](images/11-namespace-policy-image.png)\n\n12.The managed-roks cluster is in violation of the policy which requires a namespace that is called “k8sdemo” to exist.\n\n13.The managed-roks is the same cluster that you verified in the first step of this section that k8sdemo namespace does not exist. Hence it shows that there is no namespace k8demo in the cluster.\n\n  ![](images/13-namespace-policy-image.png)\n\n14.Now, let’s verify the k8demo namespace still does not exist. Back to the terminal window, run the command below:\n\n```\noc get ns\n```\n\n  ![](images/14-namespace-policy-image.png)\n\n  There should not be a namespace named k8demo listed, which indicates that the policy did not enforce it to be created.\n\n15.Back to the browser. Now, let’s change the policy to be enforced. In the policies view, click on **POLICY VIOLATIONS**.\n\n  ![](images/15-namespace-policy-image.png)\n\n16.Click the **policy-namespace** link.\n\n  ![](images/16-namespace-policy-image.png)\n\n17.Open the **YAML** tab.\n\n  ![](images/17-namespace-policy-image.png)\n\n18.Click the **Edit** button to go into edit mode to modify the YAML file.\n\n  ![](images/18-namespace-policy-image.png)\n\n19.Change the value of remediationAction: inform to **remediationAction: enforce**.\n\n  ![](images/19-namespace-policy-image.png)\n\n20.Click the **Submit** button to save the change.\n\n  ![](images/20-namespace-policy-image.png)\n\n21.Open the **Details** tab.\n\n  ![](images/21-namespace-policy-image.png)\n\n22.A few seconds later, the policy violation is automatically removed.\n\n  ![](images/22-namespace-policy-image.png)\n\n23.Open the **Violations** tab.\n\n  ![](images/23-namespace-policy-image.png)\n\n24.You also can validate the same from the Violations view: No Violations are available.\n\n  ![](images/24-namespace-policy-image.png)\n\n25.Now, let’s check how the policy on enforce mode, removed the violation. Back to the terminal window, run the command below, to ensure that the k8demo namespace is created in the cluster.\n\n```\noc get project | grep k8demo\n```\n\n  ![](images/25-namespace-policy-image.png)\n\n  You have successfully implemented the Namespace Policy!\n\n***\n\n## Network Policy\n\nA network policy is a specification of how groups of pods are allowed to communicate with each other and other network endpoints.NetworkPolicy resources use labels to select pods and define rules which specify what traffic is allowed to the selected pods.\n\nApply the network policy to define which network request to deny. For more information about network policies, refer to this [documentation](https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/).\n\nA sample network policy resembles the following:\n\n  ![](images/0-network-policy-image.png)\n\nIBM Cloud Pak for Multicloud Management enables your team to check and enforce network policy compliance against your multiple clusters in your hybrid environment.\n\nIn this section, you learn how to create a Network Policy in IBM Cloud Pak for Multicloud Management. This lab needs an application that has at least two pods with services where one pod needs to connect to other pod's associated service. You will use the application Quote of the Day that is already deployed on the cluster in the default project.\n\n1.Back to the CP4MCM Console page tab on your browser, click **Policies** link on navigation breadcrumb.\n\n  ![](images/1-network-policy-image.png)\n\n2.On the Policies view, click **New policy**.\n\n  ![](images/2-network-policy-image.png)\n\n3.Enter **policy-network** as name of the policy (1), select **default** as namespace (2), on specifications field choose **NetworkPolicy – deny network request** (3). On the cluster binding field select **environment: QA** (4).\n\n  ![](images/3-network-policy-image.png)\n\n4.On the YAML file editor, change the objectDefinition > metadata > name from deny-from-other-namespaces to **deny-all-ingress-egress-traffic**.\n\n  ![](images/4-network-policy-image.png)\n\n5.The spec section is defined as follow:\n```\nspec:\n\tpodSelector: {}\n\tpolicyTypes:\n\t\t- Ingress\n\t\t- Egress\n```\n\n  ![](images/5-network-policy-image.png)\n\n6.Keep remediationAction as inform by now. Click **Create**.\n\n  ![](images/6-network-policy-image.png)\n\n7.After few seconds, you should check that the policy violation was detected but not enforced.\n\n  ![](images/7-network-policy-image.png)\n\n  Because the policy is on inform mode, the policy is not forced.\n\n8.Scroll down, and click on the new policy: **policy-network**.\n\n  ![](images/8-network-policy-image.png)\n\n9.You see that one decision is in violation.\n\n  ![](images/9-network-policy-image.png)\n\n10.Click the **Violations** tab.\n\n  ![](images/10-network-policy-image.png)\n\n11.Here you see the violation about network isolation. Your local-cluster is not compliance with this network policy. Let’s fix it!\n\n  ![](images/11-network-policy-image.png)\n\n12.Click on **managed-roks** link to open the OpenShift Web Console of your Managed Cluster.\n\n  ![](images/12-network-policy-image.png)\n\n13.Use the side bar menu and select **Networking > Network Policies**.\n\n  ![](images/14-network-policy-image.png)\n\n14.Click the **Create Network Policy** button.\n\n  ![](images/15-network-policy-image.png)\n\n15.On the right, open the **Samples** tab.\n\n![](images/15_2-network-policy-image.png)\n\n16.On the Samples tab, there are a list of policy samples. Fortunately for us, there is a Network Policy Sample that we can use.  Click the **Try it** link (1).  Then edit the YAML, by replacing deny-other-namespaces to **deny-all-ingress-egress-traffic** (2).  Click the **Create** button to create this policy (3).\n\n  ![](images/16-network-policy-image.png)\n\n17.Great the policy is created now.\n\n  ![](images/17-network-policy-image.png)\n\n18.Go back to the CP4MCM browser tab.  You should notice that there are no violations now (wait 10 seconds if you have to).\n\n  ![](images/18-network-policy-image.png)\n\n19.Click on **Policies** link in breadcrumbs, to go back to the Policies page.\n\n  ![](images/19-network-policy-image.png)\n\n20.After waiting 10 seconds, you should see that all violations are gone.\n\n  ![](images/20-network-policy-image.png)\n\nGreat! You have successfully implemented Network Policy!\n\n***\n\n## Summary\n\nYou completed the Cloud Pak for Multicloud Management tutorial: Security & Compliance Management. IBM Cloud Pak for Multicloud Management governance, risk and compliance framework helps create custom policy controllers. You learned in the Lab how to create and customize policies with the out of the box policy templates.\n\nIf you would like to learn more about Cloud Pak for Multicloud Management, please refer to:\n-\t<a href=\"https://www.ibm.com/cloud/cloud-pak-for-management\" target=\"blank\">Cloud Pak for Multicloud Management home page</a>\n- <a href=\"https://www.ibm.com/demos/collection/Cloud-Pak-for-Multicloud-Management\" target=\"blank\">Cloud Pak for Multicloud Management Demos </a>\n","fileAbsolutePath":"/Users/dymaczew/Documents/_code/mcm/cp4mcm-demohub/src/pages/roks/securitymgmt/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","227138135","227138135","2456312558","2746626797","2746626797","3018647132","3018647132","3906363820","3906363820","768070550"]}